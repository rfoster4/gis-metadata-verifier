# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# metadata_start.py
# Created on: 2017-05-31 13:24:39.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, sys, os
import csv, datetime, types, string, arcgisscripting
from xml.etree.ElementTree import ElementTree
from xml.etree.ElementTree import Element, SubElement
import matplotlib

# Opening the file to which we will be writing output
summary = open("C:/Temp/output.csv", "w")

# Opening the file to which we will be writing errors
errorFile = open("C:/Temp/errorFile.html", "w")

# Header file with a new line
summary.write("File Name,Title,Publication Date, Res. Party Org., Online Linkage, Abstract, Status, Maint. and Update Frequency, Theme Keywords, Uses Contraints, Topic Category, Geographic Extent (West), Geographic Extent (East), Geographic Extent (North), Geographic Extent (South), Temporal Extent (Begin), Temporal Extent (Ending), Feature Catalogue, Process Description, Spatial Reference, Metadata Creation Date, Metadata Contact Name (Org), Elements Correct, Total Elements, % Correct\n")

# variables to collect # of correct elements for each feature class
numIncorrect = 0
numElements = 0
numFC = 0
#pie chart variables
pieCorrect = 0
pieIncorrect = 0
piePartial = 0

# variables for individual attributes to be listed at the bottom
errtitle = 0
errpublicationDate = 0
errresponsibleParty = 0
erronlineLinkage = 0
errabstract = 0
errstatus = 0
errupdateFrequency = 0
errsearchkeywords = 0
erruseConstraints = 0
errtopicCategory = 0
errextentWest = 0
errextentEast = 0
errextentNorth = 0
errextentSouth = 0
errtemporalExtentBegin = 0
errtemporalExtentEnd = 0
errfeatureCatalogue = 0
errprocessDescription = 0
errspatialReference = 0
errmdcreationDate = 0
errmdcontactName = 0
errnumCorrect = 0

# Calculate the percentage correct for each attribute
PCtitle = 0
PCpublicationDate = 0
PCresponsibleParty = 0
PConlineLinkage = 0
PCabstract = 0
PCstatus = 0
PCupdateFrequency = 0
PCsearchkeywords = 0
PCuseConstraints = 0
PCtopicCategory = 0
PCextentWest = 0
PCextentEast = 0
PCextentNorth = 0
PCextentSouth = 0
PCtemporalExtentBegin = 0
PCtemporalExtentEnd = 0
PCfeatureCatalogue = 0
PCprocessDescription = 0
PCspatialReference = 0
PCmdcreationDate = 0
PCmdcontactName = 0


#arcpy.env.workspace = "C:/Users/richi/OneDrive/Desktop/python_metadata/Richie/Test.gdb"
arcpy.env.workspace = "C:/Temp/Test.gdb"
datasets = arcpy.ListDatasets(feature_type='feature')
datasets = [''] + datasets if datasets is not None else []

#write legend at the top of the html file
errorFile.write("Items in " + "<font color=red>" + "RED" + "</font>" + " are missing from the metadata file" + "<br>")
errorFile.write("Items in " + "<font color=orange>" + "ORANGE" + "</font>" + " are present, but not in the specified format" + "<br>")
errorFile.write("<br>")


#Loop through all dataset in the datbase that I specified in the workspace.
for ds in datasets:
    for fc in arcpy.ListFeatureClasses(feature_dataset=ds):
        path = os.path.join(arcpy.env.workspace, ds, fc)
        print(fc)

        numIncorrect = 0
        perCorrect = 0
        numElements = 0
        pieCorrect = 0
        pieIncorrect = 0
        piePartial = 0

       # increment the number of metadata elements
        numFC = numFC + 1
        print(numFC)
        
# variables
        translator = "C:\\Program Files (x86)\\ArcGIS\\Desktop10.4\\Metadata\\Translator\\ARCGIS2FGDC.xml"
        output_xml = "C:\Temp" + "\XML_" + fc + ".xml"

        # Process: Export Metadata
        arcpy.ExportMetadata_conversion(fc, translator, output_xml)

        # Get the element Tree object from the XML file.  Will be access them using CSDGM XPath
        tree = ElementTree()
        tree.parse(output_xml)

        # Put the Feature Class name at top of error file
        errorFile.write("<br>")
        errorFile.write("<b>" + fc + ":" + "</b>")
        errorFile.write("<br>")
        errorFile.write("<br>")


        title = tree.find("idinfo/citation/citeinfo/title")
        numElements = numElements + 1
        if title is not None :
            print "Title = " + title.text
            title = title.text
            title = title.replace(",", " ")
            errorFile.write("The Title is: " + title + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            title = "NONE"
            print "Title = None"
            errorFile.write("<font color=red>" + "THE TITLE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errtitle = errtitle + 1
        arcpy.AddMessage(fc + ":" + title)

        # Look for the publication Date
        publicationDate = tree.find("idinfo/citation/citeinfo/pubdate")
        numElements = numElements + 1
        
        if publicationDate is not None:
            print publicationDate.text
            publicationDate = publicationDate.text
            publicationDate = publicationDate.replace(",", " ")
            #check to see if the publication date starts with a 1 or 2
            if publicationDate.startswith('1', 0):
                errorFile.write("The Publication Date Starts with '1', 20th Century " + "<br>")
                pieCorrect = pieCorrect + 1
            elif publicationDate.startswith('2', 0):
                errorFile.write("The Publication Date Starts with '2', 21st Century "  + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Publication Date is in WRONG format " + "</font>" + "<br>")
                piePartial = piePartial + 1
            #checks length of of publication date. Ideally, should be 8 digits long.
            if len(publicationDate) == 8:
                errorFile.write("The Publication Date Has FULL Date Listed!  " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Publication Date Does Not Have Full Date Listed" + "</font>" "<br>")
                piePartial = piePartial + 1
        
        else:
            publicationDate = "NONE"
            print "Pub. Date = None"
            errorFile.write("<font color=red>" + "THE PUBLICATION DATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errpublicationDate = errpublicationDate + 1
        arcpy.AddMessage(fc + ":" + publicationDate)
        

       # Look for Responsible Party
        responsibleParty = tree.find("idinfo/citation/citeinfo/origin")
        numElements = numElements + 1
        if responsibleParty is not None :
            print "Responsible Party = " + responsibleParty.text
            responsibleParty = responsibleParty.text
            responsibleParty = responsibleParty.replace(",", " ")
            errorFile.write("The Responsible Party is: " + responsibleParty + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            responsibleParty = "NONE"
            print "Responsible Party = None"
            errorFile.write("<font color=red>" + "THE RESPONSIBLE PARTY IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errresponsibleParty = errresponsibleParty + 1
        arcpy.AddMessage(fc + ":" + responsibleParty)

       # Look for Online Linkage
        onlineLinkage = tree.find("idinfo/citation/citeinfo/onlink")
        numElements = numElements + 1
        if onlineLinkage is not None:
            print onlineLinkage.text
            onlineLinkage = onlineLinkage.text
            onlineLinkage = onlineLinkage.replace(",", " ")
            #checks to see if online linkage starts with 'http' or 'wwww'. Not necesarrily needed, but helps to get more specific.
            if onlineLinkage.startswith('www', 0):
                errorFile.write("The Online Linkage Starts with 'www' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif onlineLinkage.startswith('http', 0):
                errorFile.write("The Online Linkage Starts with 'http' " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Online Linkage is in WRONG format" + "</font>" + "<br>")
                piePartial = piePartial + 1

        else:
            onlineLinkage = "NONE"
            print "Online Linkage = None"
            errorFile.write("<font color=red>" + "THE ONLINE LINKAGE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            erronlineLinkage = erronlineLinkage + 1
        arcpy.AddMessage(fc + ":" + onlineLinkage)
        
      # Look for Abstract
        abstract = tree.find("idinfo/descript/abstract")
        numElements = numElements + 1
        if abstract is not None:  # find the tag for the abstract
            print "Abstract = " + abstract.text
            abstract = abstract.text
            abstract = abstract.replace(",", " ")
            errorFile.write("The Abstract is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            abstract = "NONE"
            print "Abstract = None"
            errorFile.write("<font color=red>" + "THE ABSTRACT IS MISSING" + "/font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errabstract = errabstract + 1
        arcpy.AddMessage(fc + ":" + abstract)

      # Look for Status
        status = tree.find("idinfo/status/progress")
        numElements = numElements + 1
        if status is not None:  # find the tag for the abstract
            print status.text
            status = status.text
            status = status.replace(",", " ")
            #checks to see if status starts with...
            if status.startswith('complete', 0) or status.startswith('Complete', 0):
                errorFile.write("The Progress Code is 'COMPLETED' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('historical', 0) or status.startswith('Histo', 0):
                errorFile.write("The Progress Code is 'HISTORICAL ARCHIVE' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('obsolete', 0) or status.startswith('Obsolete', 0):
                errorFile.write("The Progress Code is 'OBSOLETE' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('onGoing', 0) or status.startswith('OnGoing', 0) or status.startswith('on going', 0) or status.startswith('On Going', 0):
                errorFile.write("The Progress Code is 'ON GOING' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('planned', 0) or status.startswith('Planned', 0):
                errorFile.write("The Progress Code is 'PLANNED' " +  "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('required', 0) or status.startswith('Required', 0):
                errorFile.write("The Progress Code is 'REQUIRED' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif status.startswith('under', 0) or status.startswith('Under', 0):
                errorFile.write("The Progress Code is 'UNDER DEVELOPMENT' " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Progress Code is not recognized by NCDOT GIS Metadata Content Standard" + "</font>" +  "<br>")
                piePartial = piePartial + 1

        else:
            status = "NONE"
            print "Status = None"
            errorFile.write("<font color=red>" + "THE PROGRESS CODE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errstatus = errstatus + 1
        arcpy.AddMessage(status)
        
     # Look for Maintenance / Update Frequency
        updateFrequency = tree.find("idinfo/status/update")
        numElements = numElements + 1
        if updateFrequency is not None:  # find the tag for the abstract
            print updateFrequency.text
            updateFrequency = updateFrequency.text
            updateFrequency = updateFrequency.replace(",", " ")
            #checks to see if UPDATE FREQUENCY starts with...
            if updateFrequency.startswith('continual', 0) or updateFrequency.startswith('Continual', 0):
                errorFile.write("The Update Frequency is 'CONTINUAL' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('daily', 0) or updateFrequency.startswith('Daily', 0):
                errorFile.write("The Update Frequency is 'DAILY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('weekly', 0) or updateFrequency.startswith('Weekly', 0):
                errorFile.write("The Update Frequency is 'WEEKLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('fort', 0) or updateFrequency.startswith('Fort', 0):
                errorFile.write("The Update Frequency is 'FORTNIGHTLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('monthly', 0) or updateFrequency.startswith('Monthly', 0):
                errorFile.write("The Update Frequency is 'MONTHLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('quarter', 0) or updateFrequency.startswith('Quarter', 0):
                errorFile.write("The Update Frequency is 'QUARTERLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('biannually', 0) or updateFrequency.startswith('Bianually', 0):
                errorFile.write("The Update Frequency is 'BIANNUALLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('annually', 0) or updateFrequency.startswith('Annually', 0):
                errorFile.write("The Update Frequency is 'ANNUALLY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('asNeeded', 0) or updateFrequency.startswith('as needed', 0)or updateFrequency.startswith('As Needed', 0) or updateFrequency.startswith('As needed', 0):
                errorFile.write("The Update Frequency is 'AS NEEDED' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('notPlanned', 0) or updateFrequency.startswith('not planned', 0) or updateFrequency.startswith('Not Planned', 0) or updateFrequency.startswith('Not planned', 0):
                errorFile.write("The Update Frequency is 'NOT PLANNED' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif updateFrequency.startswith('unknown', 0) or updateFrequency.startswith('Unknown', 0):
                errorFile.write("The Update Frequency is 'UNKNOWN' " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Update Frequency is not recognized by NCDOT GIS Metadata Content Standard" + "</font>" +  "<br>")
                piePartial = piePartial + 1

        else:
            updateFrequency = "NONE"
            print "Update Frequency = None"
            errorFile.write("<font color=red>" + "THE UPDATE FREQUENCY IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errupdateFrequency = errupdateFrequency + 1
        arcpy.AddMessage(fc + ":" + updateFrequency)

        # Look for search keywords
        searchkeywords = tree.find("idinfo/keywords/theme/themekey")
        numElements = numElements + 1
        if searchkeywords is not None:  # find the tag for the searth keywords
            print searchkeywords.text
            searchkeywords = searchkeywords.text
            searchkeywords = searchkeywords.replace(",", " ")
            #checks to see if THEME KEYWORD starts with...
            if searchkeywords.startswith('farm', 0) or searchkeywords.startswith('Farm', 0):
                errorFile.write("The Theme Keyword is 'FARMING' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('biota', 0) or searchkeywords.startswith('Biota', 0):
                errorFile.write("The Theme Keyword is 'BIOTA' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('boundaries', 0) or searchkeywords.startswith('Boundaries', 0):
                errorFile.write("The Theme Keyword is 'BOUNDARIES' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('climatology', 0) or searchkeywords.startswith('Climatology', 0):
                errorFile.write("The Theme Keyword is 'CLIMATOLOGY/METEOROLOGY/ATMOSPHERE' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('economy', 0) or searchkeywords.startswith('Economy', 0):
                errorFile.write("The Theme Keyword is 'ECONOMY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('elevation', 0) or searchkeywords.startswith('Elevation', 0):
                errorFile.write("The Theme Keyword is 'ELEVATION' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('environment', 0) or searchkeywords.startswith('Environment', 0):
                errorFile.write("The Theme Keyword is 'ENVIRONMENT' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('geoscientific', 0) or searchkeywords.startswith('Geoscientific', 0):
                errorFile.write("The Theme Keyword is 'GEOSCIENTIFIC INFORMATION' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('health', 0) or searchkeywords.startswith('Health', 0):
                errorFile.write("The Theme Keyword is 'HEALTH' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('imagery', 0) or searchkeywords.startswith('Imagery', 0):
                errorFile.write("The Theme Keyword is 'IMAGERY BASE MAPS EARTH COVER' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('intelligence', 0) or searchkeywords.startswith('Intelligence', 0):
                errorFile.write("The Theme Keyword is 'INTELLEGENCE MILITARY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('inland', 0) or searchkeywords.startswith('Inland', 0):
                errorFile.write("The Theme Keyword is 'INLAND WATERS' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('location', 0) or searchkeywords.startswith('Location', 0):
                errorFile.write("The Theme Keyword is 'LOCATION' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('ocean', 0) or searchkeywords.startswith('Ocean', 0):
                errorFile.write("The Theme Keyword is 'OCEANS' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('planning', 0) or searchkeywords.startswith('Planning', 0):
                errorFile.write("The Theme Keyword is 'PLANNING CADASTRE' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('society', 0) or searchkeywords.startswith('Society', 0):
                errorFile.write("The Theme Keyword is 'SOCIETY' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('structure', 0) or searchkeywords.startswith('Structure', 0):
                errorFile.write("The Theme Keyword is 'STRUCTURE' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('transport', 0) or searchkeywords.startswith('Transport', 0):
                errorFile.write("The Theme Keyword is 'TRANSPORTATION' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('utilities', 0) or searchkeywords.startswith('Utilities', 0):
                errorFile.write("The Theme Keyword is 'UTILITIES COMMUNICATION' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('extra', 0) or searchkeywords.startswith('Extra', 0):
                errorFile.write("The Theme Keyword is 'EXTRATERRESTRIAL' " + "<br>")
                pieCorrect = pieCorrect + 1
            elif searchkeywords.startswith('disaster', 0) or searchkeywords.startswith('Disaster', 0):
                errorFile.write("The Theme Keyword is 'DISASTER' " + fc + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Theme Keyword Does Not Match The ISO Topic Categories Criteria -> " + "</font>" +  searchkeywords + "<br>")
                piePartial = piePartial + 1

        else:
            searchkeywords = "NONE"
            print "Search Keywords = None"
            errorFile.write("<font color=red>" + "THE THEME KEYWORD IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errsearchkeywords = errsearchkeywords + 1
        arcpy.AddMessage(fc + ":" + searchkeywords)
            
        # Look for use constraints
        useConstraints = tree.find("idinfo/useconst")
        numElements = numElements + 1
        if useConstraints is not None:  # find the tag for the searth keywords
            print "Use Constraints = " + useConstraints.text
            useConstraints = useConstraints.text
            useConstraints = useConstraints.replace(",", " ")
            errorFile.write("The Use Constraints are PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            useConstraints = "NONE"
            print "Use Constraints = = None"
            errorFile.write("<font color=red>" + "THE USE CONSTRAINTS ARE MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            erruseConstraints = erruseConstraints + 1
        arcpy.AddMessage(fc + ":" + useConstraints)

        # Look for topic category - same is search keyword
        topicCategory = tree.find("idinfo/keywords/theme/themekey")
        numElements = numElements + 1
        if topicCategory is not None:  # find the tag for the searth keywords
            print "Topic Category = " + topicCategory.text
            topicCategory = topicCategory.text
            topicCategory = topicCategory.replace(",", " ")
            errorFile.write("The Topic Category is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            topicCategory = "NONE"
            print "Topic Category = None"
            errorFile.write("<font color=red>" + "THE TOPIC CATEGORY IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errtopicCategory = errtopicCategory + 1
        arcpy.AddMessage(fc + ":" + topicCategory)

        # Look for geographic extent - west
        extentWest = tree.find("idinfo/spdom/bounding/westbc")
        numElements = numElements + 1
        if extentWest is not None:  # find the tag for the searth keywords
            print "West Extent = " + extentWest.text
            extentWest = extentWest.text
            extentWest = extentWest.replace(",", " ")
            errorFile.write("The West Extent is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            extentWest = "NONE"
            print "West Extent = None"
            errorFile.write("<font color=red>" + "THE WEST BOUNDING COORDINATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errextentWest = errextentWest + 1
        arcpy.AddMessage(fc + ":" + extentWest)

        # Look for geographic extent - east
        extentEast = tree.find("idinfo/spdom/bounding/eastbc")
        numElements = numElements + 1
        if extentEast is not None:  # find the tag for the searth keywords
            print "East Extent = " + extentEast.text
            extentEast = extentEast.text
            extentEast = extentEast.replace(",", " ")
            errorFile.write("The East Extent is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            extentEast = "NONE"
            print "East Extent = None"
            errorFile.write("<font color=red>" + "THE EAST BOUNDING COORDINATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errextentEast = errextentEast + 1
        arcpy.AddMessage(fc + ":" + extentEast)

        # Look for geographic extent - north
        extentNorth = tree.find("idinfo/spdom/bounding/northbc")
        numElements = numElements + 1
        if extentNorth is not None:  # find the tag for the searth keywords
            print "North Extent = " + extentNorth.text
            extentNorth = extentNorth.text
            extentNorth = extentNorth.replace(",", " ")
            errorFile.write("The North Extent is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            extentEast = "NONE"
            print "North Extent = None"
            errorFile.write("<font color=red>" + "THE NORTH BOUNDING COORDINATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errextentNorth = errextentNorth + 1
        arcpy.AddMessage(fc + ":" + extentNorth)

        # Look for geographic extent - south
        extentSouth = tree.find("idinfo/spdom/bounding/southbc")
        numElements = numElements + 1
        if extentSouth is not None:  # find the tag for the searth keywords
            print "South Extent = " + extentSouth.text
            extentSouth = extentSouth.text
            extentSouth = extentSouth.replace(",", " ")
            errorFile.write("The South Extent is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            extentSouth = "NONE"
            print "South Extent = None"
            errorFile.write("<font color=red>" + "THE SOUTH BOUNDING COORDINATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errextentSouth = errextentSouth + 1
        arcpy.AddMessage(fc + ":" + extentNorth)

        # Look for temporal extent of data content
        temporalExtentBegin = tree.find("idinfo/timeperd/timeinfo/rngdates/begdate")
        numElements = numElements + 1
        if temporalExtentBegin is not None:  # find the tag for the searth keywords
            print temporalExtentBegin.text
            temporalExtentBegin = temporalExtentBegin.text
            temporalExtentBegin = temporalExtentBegin.replace(",", " ")
            #checks to see if temporal begin starts with a 1 or 2
            if temporalExtentBegin.startswith('1', 0):
                errorFile.write("The Temporal Date (Begin) Starts with '1', 20th Century " + "<br>")
                pieCorrect = pieCorrect + 1
            elif temporalExtentBegin.startswith('2', 0):
                errorFile.write("The Temporal Date (Begin) Starts with '2', 21st Century " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Temporal Date is in WRONG format" + "</font>" + "<br>")
                piePartial = piePartial + 1
            #checks the length of temporal begin. Ideally, should be 8 digits long.
            if len(temporalExtentBegin) == 8:
                errorFile.write("The Temporal Date (Begin) Has FULL Date Listed!" +  "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Temporal Date (Begin) Does Not Have Full Date Listed" + "</font>" + "<br>")
                piePartial = piePartial + 1
        else:
            temporalExtentBegin = "NONE"
            print "Temporal Extent Beginning = None"
            errorFile.write("<font color=red>" + "THE BEGINNING DATE FOR THE TEMPORAL EXTENT IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errtemporalExtentBegin = errtemporalExtentBegin + 1
        

        arcpy.AddMessage(fc + ":" + temporalExtentBegin)

        # Look for temporal extent of data content
        temporalExtentEnd = tree.find("idinfo/timeperd/timeinfo/rngdates/enddate")
        numElements = numElements + 1
        if temporalExtentEnd is not None:  # find the tag for the searth keywords
            print temporalExtentEnd.text
            temporalExtentEnd = temporalExtentEnd.text
            temporalExtentEnd = temporalExtentEnd.replace(",", " ")
            #checks to see if temporal end starts with a 1 or 2
            if temporalExtentEnd.startswith('1', 0):
                errorFile.write("The Temporal Date (End) Starts with '1', 20th Century " + "<br>")
                pieCorrect = pieCorrect + 1
            elif temporalExtentEnd.startswith('2', 0):
                errorFile.write("The Temporal Date (End) Starts with '2', 21st Century " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Temporal Date (End) is in WRONG format" + "</font>" + "<br>")
                piePartial = piePartial + 1
            #checks the length of temporal end. Ideally, should be 8 digits long.
            if len(temporalExtentEnd) == 8:
                errorFile.write("The Temporal Date (End) Has FULL Date Listed!  " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Temporal Date (End) Does Not Have Full Date Listed" + "</font>" + "<br>")
                piePartial = piePartial + 1

        else:
            temporalExtentEnd = "NONE"
            print "Temporal Extent Ending = None"
            errorFile.write("<font color=red>" + "THE ENDING DATE FOR THE TEMPORAL EXTENT IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errtemporalExtentEnd = errtemporalExtentEnd + 1
        arcpy.AddMessage(fc + ":" + temporalExtentEnd)

        # Look for Feature Catalogue
        featureCatalogue = tree.find("eainfo/overview/eaover")
        numElements = numElements + 1
        if featureCatalogue is not None:  # find the tag for the searth keywords
            print "Feature Catalogue = " + featureCatalogue.text
            featureCatalogue = featureCatalogue.text
            featureCatalogue = featureCatalogue.replace(",", " ")
            errorFile.write("The Feature Catalogue is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            featureCatalogue = "NONE"
            print "Feature Catalogue = None"
            errorFile.write("<font color=red>" + "THE FEATURE CATALOGUE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errfeatureCatalogue = errfeatureCatalogue + 1
        arcpy.AddMessage(fc + ":" + featureCatalogue)

        # Look for Process Description
        processDescription = tree.find("dataqual/lineage/procstep/procdesc")
        numElements = numElements + 1
        if processDescription is not None:  # find the tag for the searth keywords
            print "Process Description = " + processDescription.text
            processDescription = processDescription.text
            processDescription = processDescription.replace(",", " ")
            if len(processDescription) > 120:
                processDescription = processDescription[0:120]
            errorFile.write("The Process Description is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            processDescription = "NONE"
            print "Process Description = None"
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errprocessDescription = errprocessDescription + 1
            errorFile.write("<font color=red>" + "THE PROCESS DESCRIPTION IS MISSING" + "</font>" + "<br>")
        arcpy.AddMessage(fc + ":" + processDescription)

        # Look for Spatial Reference Information
        spatialReference = tree.find("spref/horizsys/planar/mapproj/mapprojn")
        numElements = numElements + 1
        if spatialReference is not None:  # find the tag for the searth keywords
            print "Spatial Reference = " + spatialReference.text
            spatialReference = spatialReference.text
            spatialReference = spatialReference.replace(",", " ")
            errorFile.write("The Spatial Reference is: " + spatialReference + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            spatialReference = "NONE"
            print "Spatial Reference = None"
            errorFile.write("<font color=red>" + "THE MAP PROJECTION IS MISSING" + "</font>" +  "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errspatialReference = errspatialReference + 1
        arcpy.AddMessage(fc + ":" + spatialReference)

        # Look for metadata creation date
        mdcreationDate = tree.find("metainfo/metd")
        numElements = numElements + 1
        if mdcreationDate is not None:  # find the tag for the searth keywords
            print mdcreationDate.text
            mdcreationDate = mdcreationDate.text
            mdcreationDate = mdcreationDate.replace(",", " ")
            #check to see if the metadata creation date starts with a 1 or 2
            if mdcreationDate.startswith('1', 0):
                errorFile.write("The Metadata Date Starts with '1', 20th Century " + "<br>")
                pieCorrect = pieCorrect + 1
            elif mdcreationDate.startswith('2', 0):
                errorFile.write("The Metadata Creation Date Starts with '2', 21st Century " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Metadata Creation Date is in WRONG format" + "</font>" + "<br>")
                piePartial = piePartial + 1
            #checks length of of publication date. Ideally, should be 8 digits long.
            if len(mdcreationDate) == 8:
                errorFile.write("The Metadata Creation Date Has FULL Date Listed!  " + "<br>")
                pieCorrect = pieCorrect + 1
            else:
                errorFile.write("<font color=orange>" + "The Metadata Creation Date Does Not Have Full Date Listed" + "</font>" + "<br>")
                piePartial + piePartial + 1
        else:
            mdcreationDate = "NONE"
            print "Metadata Creation Date = None"
            errorFile.write("<font color=red>" + "THE METADATA CREATION DATE IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errmdcreationDate = errmdcreationDate + 1
        arcpy.AddMessage(fc + ":" + mdcreationDate)

        # Look for metadata contact name (organization)
        mdcontactName = tree.find("metainfo/metc/cntinfo/cntorgp/cntorg")
        numElements = numElements + 1
        if mdcontactName is not None:  # find the tag for the searth keywords
            print "Metadata Contact Organization = " + mdcontactName.text
            mdcontactName = mdcontactName.text
            mdcontactName = mdcontactName.replace(",", " ")
            errorFile.write("The Metadata Contact Organization is: " + mdcontactName + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            mdcontactName = "NONE"
            print "Metadata Contact Organization = None"
            errorFile.write("<font color=red>" + "THE METADATA CONTACT NAME IS MISSING" + "</font>" + "<br>")
            numIncorrect = numIncorrect + 1
            pieIncorrect = pieIncorrect + 1
            errmdcontactName = errmdcontactName + 1
        arcpy.AddMessage(fc + ":" + mdcontactName)

        purpose = tree.find("idinfo/descript/purpose") 
        if purpose is not None:  # find the tag for the purpose
            print "Purpose = " + purpose.text
            purpose = purpose.text
            purpose = purpose.replace(",", " ")
            errorFile.write("The Purpose is PRESENT" + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            purpose = "NONE"
            print "Purpose = None"
            errorFile.write("<font color=red>" + "THE PURPOSE IS MISSING" + "</font>" + "<br>")
            pieIncorrect = pieIncorrect + 1
            
        poc = tree.find("idinfo/citation/citeinfo/origin") 
        if poc is not None:  # find the tag for the POC
            print "POC = " + poc.text
            poc = poc.text
            poc = poc.replace(",", " ")
            errorFile.write("The Point of Contact is: " + poc + "<br>")
            pieCorrect = pieCorrect + 1
        else:
            poc = "NONE"
            print ("POC = None")
            errorFile.write("<font color=red>" + "THE POINT OF CONTACT IS MISSING" + "</font>" + "<br>")
            pieIncorrect = pieIncorrect + 1

        #Make the pie chart on the html file (doesnt work but left the code in if you want to try)
        # Data to plot
        #labels = 'Correct', 'Incorrect', 'Partial'
        #sizes = [pieCorrect, pieIncorrect, piePartial]
        #colors = ['black', 'red', 'orange']
        #explode = (0.1, 0, 0)  # explode 1st slice

        # Plot
        #plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                #autopct='%1.1f%%', shadow=True, startangle=140)

        #plt.axis('equal')
        #errorFile.write(show())

        #print a space in error file between features
        errorFile.write("<br>")
        errorFile.write("<br>")

        # Summarize the number correct and percent
        numCorrect = numElements - numIncorrect
        perCorrect = round(float(float(100) * (float(numCorrect) / float(numElements))), 2)
        
        # Open up summary file.  Will be open the entire time
        summary.write(fc + "," + title + "," + publicationDate + "," + responsibleParty + "," + onlineLinkage + "," + abstract + "," + status + "," + updateFrequency + "," + searchkeywords + "," + useConstraints + "," + topicCategory + "," + extentWest + "," + extentEast + "," + extentNorth + "," + extentSouth + "," + temporalExtentBegin + "," + temporalExtentEnd + "," + featureCatalogue + "," + processDescription + "," + spatialReference + "," + mdcreationDate + "," + mdcontactName + "," + str(numCorrect) + "," + str(numElements) + "," + str(perCorrect) + "\n")
        # remove the XML file that was just created.  
        os.remove("C:\Temp" + "\XML_" + fc + ".xml")
        
        # "C:\\Metadata_Training\\Output\\"

# Calculate percent correct for each attribute
PCtitle = round(100 * (float(numFC) - float(errtitle)) / float(numFC),2)
PCpublicationDate = round(100 * (float(numFC) - float(errpublicationDate)) / float(numFC),2)
PCresponsibleParty = round(100 * (float(numFC) - float(errresponsibleParty))/  float(numFC),2)
PConlineLinkage = round(100 * (float(numFC) - float(erronlineLinkage))/  float(numFC),2)
PCabstract = round(100 * (float(numFC) - float(errabstract))/  float(numFC),2)
PCstatus = round(100 * (float(numFC) - float(errstatus))/  float(numFC),2)
PCupdateFrequency = round(100 * (float(numFC) - float(errupdateFrequency))/  float(numFC),2)
PCsearchkeywords = round(100 * (float(numFC) - float(errsearchkeywords))/  float(numFC),2)
PCuseConstraints = round(100 * (float(numFC) - float(erruseConstraints))/  float(numFC),2)
PCtopicCategory = round(100 * (float(numFC) - float(errtopicCategory))/  float(numFC),2)
PCextentWest = round(100 * (float(numFC) - float(errextentWest))/  float(numFC),2)
PCextentEast = round(100 * (float(numFC) - float(errextentEast))/  float(numFC),2)
PCextentNorth = round(100 * (float(numFC) - float(errextentNorth))/  float(numFC),2)
PCextentSouth = round(100 * (float(numFC) - float(errextentSouth))/  float(numFC),2)
PCtemporalExtentBegin = round(100 * (float(numFC) - float(errtemporalExtentBegin))/  float(numFC),2)
PCtemporalExtentEnd = round(100 * (float(numFC) - float(errtemporalExtentEnd))/  float(numFC),2)
PCfeatureCatalogue = round(100 * (float(numFC) - float(errfeatureCatalogue))/  float(numFC),2)
PCprocessDescription = round(100 * (float(numFC) - float(errprocessDescription))/  float(numFC),2)
PCspatialReference = round(100 * (float(numFC) - float(errspatialReference))/  float(numFC),2)
PCmdcreationDate = round(100 * (float(numFC) - float(errmdcreationDate))/  float(numFC),2)
PCmdcontactName = round(100 * (float(numFC) - float(errmdcontactName))/  float(numFC),2)

# After the loop ends, write out the errors for each of the attribute errors
summary.write("Total Correct" + "," + str(numFC - errtitle) + "," + str(numFC - errpublicationDate) + "," + str(numFC - errresponsibleParty) + "," + str(numFC - erronlineLinkage) + "," + str(numFC - errabstract) + "," + str(numFC - errstatus) + "," + str(numFC - errupdateFrequency) + "," + str(numFC - errsearchkeywords) + "," + str(numFC - erruseConstraints) + "," + str(numFC - errtopicCategory) + "," + str(numFC - errextentWest) + "," + str(numFC - errextentEast) + "," + str(numFC - errextentNorth) + "," + str(numFC - errextentSouth) + "," + str(numFC - errtemporalExtentBegin) + "," + str(numFC - errtemporalExtentEnd) + "," + str(numFC - errfeatureCatalogue) + "," + str(numFC - errprocessDescription) + "," + str(numFC - errspatialReference) + "," + str(numFC - errmdcreationDate) + "," + str(numFC - errmdcontactName) + "\n")
summary.write("Total Feature Classes" + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "," + str(numFC) + "\n")

# Write the percent correct
summary.write("Percent Correct" + "," + str(PCtitle) + "," + str(PCpublicationDate) + "," + str(PCresponsibleParty) + "," + str(PConlineLinkage) + "," + str(PCabstract) + "," + str(PCstatus) + "," + str(PCupdateFrequency) + "," + str(PCsearchkeywords) + "," + str(PCuseConstraints) + "," + str(PCtopicCategory) + "," + str(PCextentWest) + "," + str(PCextentEast) + "," + str(PCextentNorth) + "," + str(PCextentSouth) + "," + str(PCtemporalExtentBegin) + "," + str(PCtemporalExtentEnd) + "," + str(PCfeatureCatalogue) + "," + str(PCprocessDescription) + "," + str(PCspatialReference) + "," + str(PCmdcreationDate) + "," + str(PCmdcontactName) + "\n")

# Close the summary and error file
summary.close()
errorFile.close()
